@page "/Ventas/Index"
@inject Contexto _context
@using Microsoft.EntityFrameworkCore

<PageTitle>Historial de Ventas</PageTitle>

<section class="container card shadow-lg rounded mt-4 p-0">
    <header class="bg-light py-4 px-4 position-relative border-bottom">
        <h4 class="m-0 position-absolute start-50 top-50 translate-middle text-center">Historial de Ventas</h4>
        <a href="/Ventas/Crear" class="btn btn-success position-absolute end-0 top-50 translate-middle-y me-3">
            <i class="bi bi-plus-square me-1"></i> Crear
        </a>
    </header>

    <div class="card-body">
        <div class="row mb-3">
            <div class="col-md-3">
                <label class="form-label fw-bold">Filtrar por</label>
                <InputSelect class="form-select" @bind-Value="FiltroSeleccionado">
                    <option disabled selected value="">Seleccione un filtro</option>
                    <option value="Cliente">Nombre del Cliente</option>
                    <option value="Sistema">Nombre del Sistema</option>
                </InputSelect>
            </div>

            <div class="col-md-3">
                <label class="form-label fw-bold">Valor</label>
                <div class="input-group">
                    <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                    <button class="btn btn-primary" @onclick="Buscar">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>

            <div class="col-md-3">
                <label class="form-label fw-bold">Desde</label>
                <InputDate class="form-control" @bind-Value="FechaDesde" />
            </div>

            <div class="col-md-3">
                <label class="form-label fw-bold">Hasta</label>
                <InputDate class="form-control" @bind-Value="FechaHasta" />
            </div>
        </div>

        @if (PaginacionVentas?.Items?.Any() == true)
        {
            <div class="table-responsive">
                <table class="table align-middle text-center">
                    <thead>
                        <tr>
                            <th>Venta Id</th>
                            <th>Fecha</th>
                            <th>Cliente</th>
                            <th>Sistema</th>
                            <th>Cantidad</th>
                            <th>Precio</th>
                            <th>Subtotal</th>
                            <th>Acción</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var venta in PaginacionVentas.Items)
                        {
                            foreach (var detalle in venta.Detalles)
                            {
                                <tr>
                                    <td>@venta.VentaId</td>
                                    <td>@venta.Fecha.ToShortDateString()</td>
                                    <td>@venta.Cliente?.Nombres</td>
                                    <td>@detalle.Sistema?.Descripcion</td>
                                    <td>@detalle.Cantidad</td>
                                    <td>@detalle.Precio.ToString("N2")</td>
                                    <td>@(detalle.Cantidad * detalle.Precio)</td>
                                    <td>
                                        <a href="/Ventas/Modificar/@venta.VentaId" class="btn btn-outline-primary btn-sm">
                                            <i class="bi bi-pencil-square"></i>
                                        </a>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-center mt-4">No hay ventas disponibles para mostrar.</p>
        }
    </div>

    <footer class="bg-light py-3 border-top">
        @if (PaginacionVentas != null)
        {
            <div class="d-flex justify-content-center mt-4">
                <button class="btn btn-outline-primary" @onclick="() => CambiarPagina(PaginacionVentas.PaginaActual - 1)" disabled="@(!PaginacionVentas.TienePaginaAnterior)">
                    Anterior
                </button>
                <span class="mx-3"> Página @PaginacionVentas.PaginaActual de @PaginacionVentas.TotalPaginas </span>
                <button class="btn btn-outline-primary" @onclick="() => CambiarPagina(PaginacionVentas.PaginaActual + 1)" disabled="@(!PaginacionVentas.TienePaginaSiguiente)">
                    Siguiente
                </button>
            </div>
        }
    </footer>
</section>

@code {
    private List<Venta> TodasLasVentas = new();
    private List<Venta> VentasFiltradas = new();
    private Paginacion<Venta>? PaginacionVentas;

    private string FiltroSeleccionado { get; set; } = string.Empty;
    private string ValorFiltro { get; set; } = string.Empty;
    private DateTime? FechaDesde { get; set; }
    private DateTime? FechaHasta { get; set; }

    private int PaginaActual = 1;
    private const int ElementosPorPagina = 5;

    protected override async Task OnInitializedAsync()
    {
        await CargarTodasLasVentas();
        AplicarPaginacion();
    }

    private async Task CargarTodasLasVentas()
    {
        TodasLasVentas = await _context.Ventas
            .Include(v => v.Cliente)
            .Include(v => v.Detalles)
                .ThenInclude(d => d.Sistema)
            .OrderByDescending(v => v.Fecha)
            .ToListAsync();
    }

    private async Task Buscar()
    {
        await CargarTodasLasVentas(); // Siempre parte de toda la lista

        if (FechaDesde.HasValue)
            TodasLasVentas = TodasLasVentas.Where(v => v.Fecha.Date >= FechaDesde.Value.Date).ToList();

        if (FechaHasta.HasValue)
            TodasLasVentas = TodasLasVentas.Where(v => v.Fecha.Date <= FechaHasta.Value.Date).ToList();

        if (!string.IsNullOrWhiteSpace(FiltroSeleccionado) && !string.IsNullOrWhiteSpace(ValorFiltro))
        {
            var texto = ValorFiltro.Trim().ToLower();

            switch (FiltroSeleccionado)
            {
                case "Cliente":
                    TodasLasVentas = TodasLasVentas
                        .Where(v => v.Cliente?.Nombres?.ToLower().Contains(texto) == true)
                        .ToList();
                    break;

                case "Sistema":
                    TodasLasVentas = TodasLasVentas
                        .Where(v => v.Detalles.Any(d => d.Sistema?.Descripcion?.ToLower().Contains(texto) == true))
                        .ToList();
                    break;
            }
        }

        VentasFiltradas = TodasLasVentas;
        PaginaActual = 1;
        AplicarPaginacion();
    }

    private void AplicarPaginacion()
    {
        VentasFiltradas = TodasLasVentas;
        PaginacionVentas = new Paginacion<Venta>(VentasFiltradas, PaginaActual, ElementosPorPagina);
    }

    private void CambiarPagina(int nuevaPagina)
    {
        if (PaginacionVentas != null && nuevaPagina >= 1 && nuevaPagina <= PaginacionVentas.TotalPaginas)
        {
            PaginaActual = nuevaPagina;
            AplicarPaginacion();
        }
    }

    public class Paginacion<T>
    {
        public int PaginaActual { get; private set; }
        public int TotalPaginas { get; private set; }
        public List<T> Items { get; private set; }
        public bool TienePaginaAnterior => PaginaActual > 1;
        public bool TienePaginaSiguiente => PaginaActual < TotalPaginas;

        public Paginacion(List<T> source, int pageNumber, int pageSize)
        {
            var total = source.Count;
            TotalPaginas = (int)Math.Ceiling(total / (double)pageSize);
            PaginaActual = pageNumber > TotalPaginas ? TotalPaginas : pageNumber;
            Items = source.Skip((PaginaActual - 1) * pageSize).Take(pageSize).ToList();
        }
    }
}