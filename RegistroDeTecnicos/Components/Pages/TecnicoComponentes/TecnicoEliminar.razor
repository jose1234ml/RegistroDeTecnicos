@page "/Tecnico/Eliminar/{TecnicoId:int}"

@inject TecnicoService tecnicoService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Eliminar Técnico</PageTitle>

@* Notificaciones *@
<div class="container mt-4">
	<div class="alert alert-danger text-center" role="alert" hidden="@string.IsNullOrEmpty(Confirmacion)">
		@Confirmacion
	</div>

	<div class="alert alert-warning text-center" role="alert" hidden="@string.IsNullOrEmpty(Pregunta)">
		@Pregunta
	</div>
</div>

<div class="container card shadow-lg mt-3">

	@* Header *@
	<div class="card-header text-center">
		<h5 class="card-title mb-0">Eliminar Técnico</h5>
	</div>

	@* Cuerpo *@
	<div class="card-body">
		<p><strong>Técnico ID:</strong> @Tecnico.TecnicoId</p>
		<hr class="my-3" />

		<p><strong>Nombre:</strong> @Tecnico.NombreTecnico</p>
		<hr class="my-3" />

		<p><strong>Sueldo:</strong> @Tecnico.SueldoHora.ToString("N2")</p>
		<hr class="my-3" />
	</div>

	@* Footer y botones *@
	<div class="card-footer text-center">
		<a href="/Tecnico/Index" class="btn btn-outline-primary me-2">
			<i class="bi bi-arrow-left"></i> Volver
		</a>

		<button class="btn btn-outline-danger" @onclick="Borrar">
			<i class="bi bi-trash"></i> Eliminar
		</button>
	</div>
</div>

@code {
	[Parameter]
	public int TecnicoId { get; set; }

	private Tecnicos Tecnico { get; set; } = new Tecnicos();
	private string Confirmacion { get; set; } = string.Empty;
	private string Pregunta { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		Tecnico = await tecnicoService.Buscar(TecnicoId);
		Pregunta = "¿Está seguro de eliminar el técnico?";
	}

	public async Task Borrar()
	{
		var eliminado = await tecnicoService.Eliminar(TecnicoId);
		if (eliminado != null)
		{
			Confirmacion = "Técnico eliminado correctamente";
			navigationManager.NavigateTo("/Tecnico/Index");
		}
		else
		{
			Confirmacion = "No se pudo eliminar al técnico";
		}
	}
}