@page "/Sistema/Index"
@inject SistemaService sistemaService
@rendermode InteractiveServer

<PageTitle>Consulta de Sistemas</PageTitle>

<section class="container card shadow-lg rounded mt-4 p-0">
    <header class="bg-light py-4 px-4 position-relative border-bottom">
        <h4 class="m-0 position-absolute start-50 top-50 translate-middle text-center">Consulta de sistemas</h4>
        <a href="/Sistema/Crear" class="btn btn-success position-absolute end-0 top-50 translate-middle-y me-3">
            <i class="bi bi-plus-square me-1"></i> Crear
        </a>
    </header>

    <div class="card-body">
        <div class="row mb-3">
            <div class="col-md-3">
                <label class="form-label fw-bold">Filtrar por</label>
                <InputSelect class="form-select" @bind-Value="Filtro">
                    <option disabled selected value="">Seleccione una opción</option>
                    <option value="SistemaId">Id</option>
                    <option value="Descripcion">Descripción</option>
                    <option value="Complejidad">Complejidad</option>
                </InputSelect>
            </div>

            <div class="col-md-5">
                <label class="form-label fw-bold">Búsqueda</label>
                <div class="input-group">
                    <input class="form-control" @bind="ValorFiltro" placeholder="Buscador" />
                    <button class="btn btn-primary" @onclick="Buscar">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Sistema Id</th>
                        <th>Descripción</th>
                        <th>Complejidad</th>
                        <th>Cantidad de Existencia</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (paginacionSistemas?.Items?.Any() == true)
                    {
                        @foreach (var sistema in paginacionSistemas.Items)
                        {
                            <tr>
                                <td>@sistema.SistemaId</td>
                                <td>@sistema.Descripcion</td>
                                <td>@GetComplejidad(sistema.Complejidad)</td>
                                <td>@sistema.Existencia</td>
                                <td>
                                    <a href="/Sistema/Modificar/@sistema.SistemaId" class="btn btn-outline-primary">
                                        <i class="bi bi-pencil-square"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center">No hay sistemas registrados o no se encontraron resultados.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <footer class="bg-light py-3 border-top">
        @if (paginacionSistemas != null && paginacionSistemas.Items.Any())
        {
            <div class="d-flex justify-content-center mt-4">
                <button class="btn btn-outline-primary" @onclick="() => CambiarPagina(paginacionSistemas.PaginaActual - 1)" disabled="@(!paginacionSistemas.TienePaginaAnterior)">
                    Anterior
                </button>

                <span class="mx-3"> Página @paginacionSistemas.PaginaActual de @paginacionSistemas.TotalPaginas </span>

                <button class="btn btn-outline-primary" @onclick="() => CambiarPagina(paginacionSistemas.PaginaActual + 1)" disabled="@(!paginacionSistemas.TienePaginaSiguiente)">
                    Siguiente
                </button>
            </div>
        }
    </footer>
</section>

@code {
    private Paginacion<Sistema>? paginacionSistemas;
    private List<Sistema> todosLosSistemas { get; set; } = new List<Sistema>();

    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    private int PaginaActual = 1;
    private const int ElementosPorPagina = 7;

    protected override async Task OnInitializedAsync()
    {
        todosLosSistemas = await sistemaService.ObtenerSistemas();
        AplicarPaginacion();
    }

    private async Task Buscar()
    {
        todosLosSistemas = await sistemaService.ObtenerSistemas();
        List<Sistema> resultadosFiltrados = new(todosLosSistemas);

        if (!string.IsNullOrWhiteSpace(Filtro) && !string.IsNullOrWhiteSpace(ValorFiltro))
        {
            switch (Filtro)
            {
                case "SistemaId":
                    if (int.TryParse(ValorFiltro, out var sistemaId))
                        resultadosFiltrados = resultadosFiltrados.Where(s => s.SistemaId == sistemaId).ToList();
                    break;

                case "Descripcion":
                    resultadosFiltrados = resultadosFiltrados
                        .Where(s => s.Descripcion?.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase) == true)
                        .ToList();
                    break;

                case "Complejidad":
                    resultadosFiltrados = resultadosFiltrados
                        .Where(s => s.Complejidad?.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase) == true)
                        .ToList();
                    break;
            }
        }

        todosLosSistemas = resultadosFiltrados;
        PaginaActual = 1;
        AplicarPaginacion();
    }

    private void AplicarPaginacion()
    {
        paginacionSistemas = new Paginacion<Sistema>(todosLosSistemas, PaginaActual, ElementosPorPagina);
    }

    private void CambiarPagina(int nuevaPagina)
    {
        if (paginacionSistemas != null && nuevaPagina >= 1 && nuevaPagina <= paginacionSistemas.TotalPaginas)
        {
            PaginaActual = nuevaPagina;
            AplicarPaginacion();
        }
    }

    private string GetComplejidad(string? complejidad)
    {
        if (string.IsNullOrWhiteSpace(complejidad))
            return "Desconocido";

        var valor = complejidad.Trim().ToLower();
        return valor switch
        {
            "baja" => "Baja",
            "media" => "Media",
            "alta" => "Alta",
            _ => valor // Muestra el valor tal como viene si no coincide con las 3 esperadas
        };
    }
}
