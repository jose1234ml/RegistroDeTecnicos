@page "/Tickets/Index"
@inject TicketService ticketService
@rendermode InteractiveServer

<PageTitle>Tickets</PageTitle>

<section class="container card shadow-lg rounded mt-4 p-0">
    <header class="bg-light py-4 px-4 position-relative border-bottom">
        <h4 class="m-0 position-absolute start-50 top-50 translate-middle text-center">Listado de Tickets</h4>
        <a href="/Tickets/Crear" class="btn btn-success position-absolute end-0 top-50 translate-middle-y me-3">
            <i class="bi bi-plus-square me-1"></i> Crear
        </a>
    </header>

    <div class="card-body">
        <div class="row mb-3">
            <div class="col-md-3">
                <label class="form-label fw-bold">Filtrar por</label>
                <InputSelect class="form-select" @bind-Value="Filtro">
                    <option disabled selected value="">Seleccione una opción</option>
                    <option value="TicketId">Ticket ID</option>
                    <option value="Prioridad">Prioridad</option>
                    <option value="Cliente">Nombre Cliente</option>
                    <option value="Asunto">Asunto</option>
                    <option value="Descripcion">Descripción</option>
                    <option value="Tecnico">Nombre Técnico</option>
                </InputSelect>
            </div>

            <div class="col-md-3">
                <label class="form-label fw-bold">Valor</label>
                <div class="input-group">
                    <input class="form-control" @bind="ValorFiltro" placeholder="Valor del filtro" />
                    <button class="btn btn-primary" @onclick="Buscar">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>

            <div class="col-md-3">
                <label class="form-label fw-bold">Desde</label>
                <InputDate class="form-control" @bind-Value="FechaDesde" />
            </div>

            <div class="col-md-3">
                <label class="form-label fw-bold">Hasta</label>
                <InputDate class="form-control" @bind-Value="FechaHasta" />
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-hover">
                <thead class="table-light">
                    <tr>
                        <th>Ticket Id</th>
                        <th>Fecha</th>
                        <th>Asunto</th>
                        <th>Descripción</th>
                        <th>Prioridad</th>
                        <th>Cliente</th>
                        <th>Técnico</th>
                        <th>Tiempo Invertido</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (paginacionTickets?.Items?.Any() == true)
                    {
                        @foreach (var ticket in paginacionTickets.Items)
                        {
                            <tr>
                                <td>@ticket.TicketId</td>
                                <td>@ticket.Fecha.ToShortDateString()</td>
                                <td>@ticket.Asunto</td>
                                <td>@ticket.Descripcion</td>
                                <td>@ticket.Prioridad</td>
                                <td>@ticket.Cliente?.Nombres</td>
                                <td>@ticket.Tecnico?.NombreTecnico</td>
                                <td>@ticket.TiempoInvertido</td>
                                <td>
                                    <a class="btn btn-outline-warning btn-sm me-1" href="/Tickets/Modificar/@ticket.TicketId">
                                        <i class="bi bi-pencil-square"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="9" class="text-center">No hay tickets registrados.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <footer class="bg-light py-3 border-top">
        @if (paginacionTickets != null)
        {
            <div class="d-flex justify-content-center mt-4">
                <button class="btn btn-outline-primary" @onclick="() => CambiarPagina(paginacionTickets.PaginaActual - 1)" disabled="@(!paginacionTickets.TienePaginaAnterior)">
                    Anterior
                </button>

                <span class="mx-3"> Página @paginacionTickets.PaginaActual de @paginacionTickets.TotalPaginas </span>

                <button class="btn btn-outline-primary" @onclick="() => CambiarPagina(paginacionTickets.PaginaActual + 1)" disabled="@(!paginacionTickets.TienePaginaSiguiente)">
                    Siguiente
                </button>
            </div>
        }
    </footer>
</section>

@code {
    private Paginacion<Ticket>? paginacionTickets;
    private List<Ticket> todosLosTickets { get; set; } = new(); 
    private string Filtro { get; set; } = string.Empty;
    private string ValorFiltro { get; set; } = string.Empty;
    private DateTime? FechaDesde { get; set; }
    private DateTime? FechaHasta { get; set; }

    private int PaginaActual = 1;
    private const int ElementosPorPagina = 5; 

    protected override async Task OnInitializedAsync()
    {
        todosLosTickets = await ticketService.ObtenerTickets();
        AplicarPaginacion();
    }

    private async Task Buscar()
    {
        todosLosTickets = await ticketService.ObtenerTickets(); 

        if (FechaDesde.HasValue)
            todosLosTickets = todosLosTickets.Where(t => t.Fecha.Date >= FechaDesde.Value.Date).ToList();

        if (FechaHasta.HasValue)
            todosLosTickets = todosLosTickets.Where(t => t.Fecha.Date <= FechaHasta.Value.Date).ToList();
        if (!string.IsNullOrWhiteSpace(Filtro) && !string.IsNullOrWhiteSpace(ValorFiltro))
        {
            switch (Filtro)
            {
                case "TicketId":
                    if (int.TryParse(ValorFiltro, out var id))
                        todosLosTickets = todosLosTickets.Where(t => t.TicketId == id).ToList();
                    break;
                case "Prioridad":
                    todosLosTickets = todosLosTickets.Where(t => t.Prioridad?.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase) == true).ToList();
                    break;
                case "Cliente":
                    todosLosTickets = todosLosTickets.Where(t => t.Cliente?.Nombres?.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase) == true).ToList();
                    break;
                case "Asunto":
                    todosLosTickets = todosLosTickets.Where(t => t.Asunto?.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase) == true).ToList();
                    break;
                case "Descripcion":
                    todosLosTickets = todosLosTickets.Where(t => t.Descripcion?.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase) == true).ToList();
                    break;
                case "Tecnico":
                    todosLosTickets = todosLosTickets.Where(t => t.Tecnico?.NombreTecnico?.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase) == true).ToList();
                    break;
            }
        }

        PaginaActual = 1; 
        AplicarPaginacion();
    }

    private void AplicarPaginacion()
    {
        paginacionTickets = new Paginacion<Ticket>(todosLosTickets, PaginaActual, ElementosPorPagina);
    }

    private void CambiarPagina(int nuevaPagina)
    {
        if (paginacionTickets != null && nuevaPagina >= 1 && nuevaPagina <= paginacionTickets.TotalPaginas)
        {
            PaginaActual = nuevaPagina;
            AplicarPaginacion();
        }
    }
}